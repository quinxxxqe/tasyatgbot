import os
import asyncio
import random
from aiogram.types import FSInputFile
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InputFile
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from aiohttp import web

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class QuestStates(StatesGroup):
    q1 = State()
    q2 = State()
    q3 = State()
    q4 = State()
    q5 = State()
    q6 = State()
    q7 = State()
    q8 = State()
    q9 = State()
    q10 = State()

async def send_wrong_answer(message: types.Message):
    await message.answer("–õ—é–±–∏–º–∞—è, —ç—Ç–æ –Ω–µ —Ç–æ üå∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, —è –≤–µ—Ä—é –≤ —Ç–µ–±—è üíï")

# –°–ª–æ–≤–∞—Ä–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤
answers = {
    "q1": ["—á–∞—Ç", "—á–∞—Ç –∫–æ—Ä—à–∏", "–≤ —á–∞—Ç–µ", "–≤ —á–∞—Ç–µ —É –∫–æ—Ä—à–∏"],
    "q2": ["–∫–æ–º–µ—Ç–∞", "—Ö–æ–ª–æ–¥", "–∫–∏—Ü—è –∫–∏—Ü—é–Ω—è"],
    "q3": ["–≤—Å—é –º–µ–Ω—è", "–ª–∏—á–∏–∫–æ", "–≥–ª–∞–∑–∫–∏", "—É–ª—ã–±–æ—á–∫—É", "—Ç–∏—Ç–∏", "—Ä—É—á–∫–∏", "–ø–ª–µ—á–∏–∫–∏", "–≥—É–±–∫–∏", "–Ω–æ—Å–∏–∫", "—â–µ—á–∫–∏", "–Ω–æ–∂–∫–∏", "—Ñ–∏–≥—É—Ä–∫—É"],
    "q4": ["–Ω–æ—á—å", "–≤–µ—á–µ—Ä", "–ø–æ–∑–¥–Ω–æ", "—É—Ç—Ä–æ–º"],
    "q5": ["–∫–∏—Ü—è", "–∫–∏—Ü—é–Ω—è", "–∫–æ—Ç—ë–Ω–æ–∫", "–ª—é–±–∏–º–∞—è", "—Å–æ–ª–Ω—ã—à–∫–æ", "–º–æ—è –¥–µ–≤–æ—á–∫–∞", "–ø—Ä–∏–Ω—Ü–µ—Å—Å–∞", "—Ç–∞—Å–µ–Ω—å–∫–∞"],
    "q6": ["—Å–µ—Ä–¥—Ü–µ", "—Å–æ–æ–±—â–µ–Ω–∏—è", "–≥–æ–ª–æ—Å–æ–≤—ã–µ", "–ø–µ—Å–Ω–∏", "—Å–Ω—ã", "–º—ã—Å–ª–∏", "—Å–∫—É—á–∞–µ—à—å", "—Ñ–æ—Ç–æ—á–∫–∏", "–≤—Å–µ", "–≤—Å—ë"],
    "q7": ["–æ–±–Ω—è—Ç—å—Å—è", "–ø–æ—Ü–µ–ª–æ–≤–∞—Ç—å—Å—è", "–æ–±–Ω–∏–º–∞—à–∫–∏", "–≤—Å—Ç—Ä–µ—Ç–∏—Ç—å—Å—è", "–¥–µ—Ä–∂–∞—Ç—å—Å—è –∑–∞ —Ä—É—á–∫—É", "—Ç—É–¥–∞ —Å—é–¥–∞", "–ø–æ–≥—É–ª—è—Ç—å", "—Å–ø–∞—Ç—å –≤–º–µ—Å—Ç–µ"],
    "q8": ["–º–æ—Ä–µ", "–ø–∞—Ä–∏–∂", "–∫–∏–µ–≤", "–∫–∞–∑–∞–Ω—å", "–≤–µ—Å—å –º–∏—Ä", "–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "—É—Å—Å—É—Ä–∏–π—Å–∫"],
    "q9": ["—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏", "—Å–∞–º—ã—Ö —Å–ª–∞–¥–µ–Ω—å–∫–∏—Ö —Å–Ω–æ–≤", "—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤", "–ª—é–±–ª—é —Ç–µ–±—è", "–∫–æ—Ö–∞—é —Ç–µ–±–µ", "–ª—é–±–ª—é —Ç–µ–±—è –±–µ–∑—É–º–Ω–æ —Å–∏–ª—å–Ω–æ", "–ª—é–±–ª—é —Ç–µ–±—è –æ—á–µ–Ω—å –æ—á–µ–Ω—å —Å–∏–ª—å–Ω–æ", "—Ç—ã —Å–∞–º—ã–π —Å–∞–º—ã–π –ª—É—á—à–∏–π", "—Ç—ã —Å–∞–º–∞—è —Å–∞–º–∞—è –ª—É—á—à–∞—è", "—Å–æ—Å–∫—É—á–∏–ª—Å—è –ø–æ —Ç–µ–±–µ", "—Å–æ—Å–∫—É—á–∏–ª–∞—Å—å –ø–æ —Ç–µ–±–µ"],
    "q10": ["—Å–µ—Ä–¥—Ü–µ", "–∑–≤–µ–∑–¥–∞", "–ª—É–Ω–∞", "—Ä–æ–∑–æ—á–∫–∞", "–∫–æ–ª—å—Ü–æ", "–±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç—å", "—Å–µ—Ä–¥–µ—á–∫–æ", "–∫–æ—Ç–∏–∫–∏", "–≤—ã–¥—Ä–æ—á–∫–∏", "–±–∏–±–∏–∑—è–Ω–∫–∏", "–æ–±–µ–∑—å—è–Ω–∫–∏", "–ª–µ–±–µ–¥–∏", "—Å–æ–±–∞—á–∫–∏"]
}

questions = {
    "q1": "‚ú® –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: –ì–¥–µ –º—ã –≤–ø–µ—Ä–≤—ã–µ –≤—Å—Ç—Ä–µ—Ç–∏–ª–∏—Å—å –æ–Ω–ª–∞–π–Ω?",
    "q2": "üé∂ –ö–∞–∫–∞—è –ø–µ—Å–Ω—è –æ–¥–Ω–∞ –∏–∑ –ø–µ—Ä–≤—ã—Ö, –∫–æ—Ç–æ—Ä—É—é —è —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞–ª (–∏–ª–∏ —Ç—É, –∫–æ—Ç–æ—Ä—É—é —è –∏–Ω–æ–≥–¥–∞ —Ç–µ–±–µ –ø–æ—é)?",
    "q3": "üì∏ –ß—Ç–æ —è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –ª—é–±–ª—é –≤–∏–¥–µ—Ç—å –Ω–∞ —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ—á–∫–∞—Ö?",
    "q4": "üåô –í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫ –º—ã —á–∞—â–µ –≤—Å–µ–≥–æ –æ–±—â–∞–µ–º—Å—è?",
    "q5": "üíå –ö–∞–∫–æ–µ –º–æ—ë –ª—é–±–∏–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Ç–µ–±–µ?",
    "q6": "‚ù§Ô∏è –ß—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç —Ç–µ–±–µ –æ–±–æ –º–Ω–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å?",
    "q7": "ü§ó –ß—Ç–æ –º—ã –º–µ—á—Ç–∞–µ–º —Å–¥–µ–ª–∞—Ç—å –ø—Ä–∏ –≤—Å—Ç—Ä–µ—á–µ?",
    "q8": "üåç –ö–∞–∫–æ–µ –º–µ—Å—Ç–æ –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ—Å–µ—Ç–∏–º –≤–¥–≤–æ—ë–º?",
    "q9": "üò¥ –ß—Ç–æ –º—ã —á–∞—â–µ –≤—Å–µ–≥–æ –≥–æ–≤–æ—Ä–∏–º –¥—Ä—É–≥ –¥—Ä—É–≥—É –ø–µ—Ä–µ–¥ —Å–Ω–æ–º?",
    "q10": "üíñ –ï—Å–ª–∏ –±—ã —É –Ω–∞—Å –±—ã–ª –æ–±—â–∏–π —Å–∏–º–≤–æ–ª, —á—Ç–æ –±—ã —ç—Ç–æ –±—ã–ª–æ?"
}

order = ["q1", "q2", "q3", "q4", "q5", "q6", "q7", "q8", "q9", "q10"]

# üì∏ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ
photos = ["photo1.jpg", "photo2.jpg", "photo3.jpg"]

@dp.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, –º–æ—è –ª—é–±–∏–º–∞—è –¢–∞—Å–µ–Ω—å–∫–∞ üíñ –ì–æ—Ç–æ–≤–∞ –ø—Ä–æ–π—Ç–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–≤–µ—Å—Ç –æ –Ω–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏? –ù–∞–ø–∏—à–∏ /–Ω–∞—á–∞—Ç—å")

@dp.message(F.text == "/–Ω–∞—á–∞—Ç—å")
async def start_quest(message: types.Message, state: FSMContext):
    await message.answer(questions["q1"])
    await state.set_state(QuestStates.q1)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
async def handle_answer(message: types.Message, state: FSMContext, current_q: str, next_q: str, next_state: State):
    text = message.text.lower()
    if any(ans in text for ans in answers[current_q]):
        if next_q:
            await message.answer(f"–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –ª—é–±–∏–º–∞—è üåπ {questions[next_q]}")
            await state.set_state(next_state)
 else:
    await message.answer("–¢—ã —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å, –º–æ—è –¥—É—à–∞! ü•∞ –ù–∞—à –∫–≤–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω, –∞ –Ω–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è ‚ú®")
    await message.answer("–•–æ—á—É –ø–æ–¥–∞—Ä–∏—Ç—å —Ç–µ–±–µ –∫–æ–µ-—á—Ç–æ –æ—Å–æ–±–µ–Ω–Ω–æ–µ... üéÅ")
    try:
        photos = ["photo1.jpg", "photo2.jpg", "photo3.jpg"]  # –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–≤–æ–∏—Ö —Ñ–æ—Ç–æ
        chosen_photo = random.choice(photos)
        photo = FSInputFile(chosen_photo)
        await message.answer_photo(photo, caption="–≠—Ç–æ –º–æ—ë –ø–æ—Å–ª–∞–Ω–∏–µ —Ç–µ–±–µ, –ª—é–±–æ–≤—å –º–æ—è üíñ")
        except FileNotFoundError:
        await message.answer("–§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–æ –∑–Ω–∞–π ‚Äî –≤ –º–æ—ë–º —Å–µ—Ä–¥—Ü–µ –≤—Å–µ–≥–¥–∞ —Ç–≤–æ–∏ –æ–±—Ä–∞–∑—ã üíû")

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
@dp.message(QuestStates.q1)
async def q1(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q1", "q2", QuestStates.q2)

@dp.message(QuestStates.q2)
async def q2(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q2", "q3", QuestStates.q3)

@dp.message(QuestStates.q3)
async def q3(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q3", "q4", QuestStates.q4)

@dp.message(QuestStates.q4)
async def q4(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q4", "q5", QuestStates.q5)

@dp.message(QuestStates.q5)
async def q5(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q5", "q6", QuestStates.q6)

@dp.message(QuestStates.q6)
async def q6(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q6", "q7", QuestStates.q7)

@dp.message(QuestStates.q7)
async def q7(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q7", "q8", QuestStates.q8)

@dp.message(QuestStates.q8)
async def q8(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q8", "q9", QuestStates.q9)

@dp.message(QuestStates.q9)
async def q9(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q9", "q10", QuestStates.q10)

@dp.message(QuestStates.q10)
async def q10(message: types.Message, state: FSMContext):
    await handle_answer(message, state, "q10", None, None)

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
async def handle(request):
    return web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –≠—Ç–æ HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.")

async def run_all():
    app = web.Application()
    app.router.add_get('/', handle)
    
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, host='0.0.0.0', port=8080)
    await site.start()
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(run_all())



