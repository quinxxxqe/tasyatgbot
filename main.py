import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InputFile
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv

load_dotenv()

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)  
)

storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class QuestStates(StatesGroup):
    waiting_for_answer1 = State()
    waiting_for_answer2 = State()
    waiting_for_final_answer = State()

async def send_wrong_answer(message: types.Message):
    await message.answer("–ê—è—è–π, –ª—é–±–∏–º–∞—è –º–æ—è –¥–µ–≤–æ—á–∫–∞, –ø–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ —É–≥–∞–¥–∞–ª–∞, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑, —è —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —É —Ç–µ–±—è –ø–æ–ª—É—á–∏—Ç—Å—è!üíó")

@dp.message(F.text == "/start")
async def start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å –∫–≤–µ—Å—Ç? –ù–∞–ø–∏—à–∏ /–Ω–∞—á–∞—Ç—å")

@dp.message(F.text == "/–Ω–∞—á–∞—Ç—å")
async def question1(message: types.Message, state: FSMContext):
    await message.answer("–ü–µ—Ä–≤–∞—è –∑–∞–≥–∞–¥–∫–∞: –ì–¥–µ –º—ã –≤–ø–µ—Ä–≤—ã–µ –ø–æ–≥–æ–≤–æ—Ä–∏–ª–∏?")
    await state.set_state(QuestStates.waiting_for_answer1)

@dp.message(QuestStates.waiting_for_answer1)
async def answer1(message: types.Message, state: FSMContext):
    if message.text.lower() == "—á–∞—Ç –∫–æ—Ä—à–∏":
        await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: –ö–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è –ø–µ—Å–Ω—è, –∫–æ—Ç–æ—Ä—É—é —è —Ç–µ–±–µ –æ–¥–Ω–∞–∂–¥—ã –ø–æ—Å–≤—è—Ç–∏–ª?")
        await message.answer("–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã: 12")
        await state.set_state(QuestStates.waiting_for_answer2)
    else:
        await send_wrong_answer(message)

@dp.message(QuestStates.waiting_for_answer2)
async def answer2(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–∫–æ–º–µ—Ç–∞", "—Ö–æ–ª–æ–¥"]:
        await message.answer("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å: –°–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º—ã —Å–∫–∞–∑–∞–ª–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É '–ª—é–±–ª—é —Ç–µ–±—è'?")
        await message.answer("–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã: 09")
        await state.set_state(QuestStates.waiting_for_final_answer)
    else:
        await send_wrong_answer(message)

@dp.message(QuestStates.waiting_for_final_answer)
async def final_question(message: types.Message, state: FSMContext):
    if message.text == "3323":
        await message.answer("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Å–æ–±–µ—Ä–∏ –≤—Å–µ —Ü–∏—Ñ—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ —è —Ç–µ–±–µ –æ—Ç–ø—Ä–∞–≤–∏–ª, –∏ –Ω–∞–ø–∏—à–∏ –¥–∞—Ç—É, –∫–æ—Ç–æ—Ä—É—é –æ–Ω–∏ –æ–±—Ä–∞–∑—É—é—Ç.")
        await message.answer("–ó–∞–ø–æ–º–Ω–∏ —ç—Ç–∏ —Ü–∏—Ñ—Ä—ã: 23")
    else:
        await send_wrong_answer(message)

@dp.message(F.text == "12.09.23")
async def final_answer(message: types.Message):
    await message.answer("–¢—ã —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å! üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ä–∞—Å–∫—Ä—ã–ª–∞ —Ç–∞–π–Ω–æ–µ –ø–æ—Å–ª–∞–Ω–∏–µ! ‚ù§Ô∏è")
    await message.answer("–¢–µ–ø–µ—Ä—å, –ø–æ–ª—É—á–∏ –ø–æ—Å–ª–∞–Ω–∏–µ –≤ –≤–∏–¥–µ–æ —Ñ–æ—Ä–º–∞—Ç–µ!")

    try:
        video = InputFile("video.mp4")
        await message.answer_video(video)
    except FileNotFoundError:
        await message.answer("–û—à–∏–±–∫–∞: –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

